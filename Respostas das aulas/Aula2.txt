Q1. Quais as diferenças entre os barramentos de dados e de endereços?
R: Barramento de dados são quantidade de bits que são enviados de forma paralela pelo data bus.
Endereço representa exatamente a posição na memória para que se possa ler algum valor naquele endereço específico.

Q2. Quais são as diferenças entre as memórias RAM e ROM?
RAM é uma memória volátil que é apagada quando não está energizada, é altamente veloz em relação à memória ROM e é de acesso aleatório(random), isto é, consegue pegar de forma precisa a posição que você quer sem carregar dados desnecessários.
ROM é uma memória não-volátil que mesmo sem energia continua com dados armazenados, entretanto é bem mais lenta que a RAM.

Q3. Considere o código abaixo, de 12 linhas:

    1.   #include <stdio.h>
    2.   int main(void)
    3.   {
    4.      int i;
    5.      printf("Insira um número inteiro: ");
    6.      scanf("%d", &i);
    7.      if(i%2)
    8.         printf("%d eh impar.\n");
    9.      else
   10.         printf("%d eh par.\n");
   11.      return 0;
   12.   }

Para este código, responda:
	(a) A variável 'i' é armazenada na memória RAM ou ROM? Por quê?
	R: RAM, variáveis sempre são armazenadas na RAM, pois são mais rápidos que na ROM. Isso é algo relevante em runtime.

	(b) O programa compilado a partir deste código é armazenado na memória RAM ou ROM? Por quê?
	R: ROM, o programa compilado sempre é armazenado na ROM para que possa ser executado sempre, mesmo depois de reiniciado o dispositivo.

Q4. Quais são as diferenças, vantagens e desvantagens das arquiteturas Harvard e Von Neumann?
	Harvard: Mais rápida, entretanto são 2 componentes separados.
	Von Neumann: Mais lenta, entretanto usam apenas um único componente para vários tipos de memória.

Q5. Considere a variável inteira 'i', armazenando o valor 0x8051ABCD. Se 'i' é armazenada na memória a partir do endereço 0x0200, como ficam este byte e os seguintes, considerando que a memória é:
	(a) Little-endian?
		0x200: 0xCD
		0x202: 0xAB
		0x204: 0x51
		0x206: 0x80 

	(b) Big-endian?
		0x200: 0x80
		0x202: 0x51
		0x204: 0xAB
		0x206: 0xCD 

Q6. Sabendo que o processador do MSP430 tem registradores de 16 bits, como ele soma duas variáveis de 32 bits?
	Verificando a flag de Overflow da própria CPU ou fazendo análise de sinal com a flag de negativo.